const { Op } = require("sequelize");
const { RequestPost, RequestPostTags } = require("../models");

const getRequest = async (req, res) => {
   try {
       const requestId = req.params.postId;
       const response = await RequestPost.findByPk(requestId, {include: ["requestTags"]});
       res.json(response);
       res.sendStatus(200);
   } catch (error) {
       console.log("Error finding an offer post: " + error);
       res.sendStatus(500);
   }
}

const searchRequests = async (req, res) => {
    try {
        const title = req.params.title;
        const query = "%" + title + "%";

        //find all posts which have a title containing the query
        const response = await RequestPost.findAll({
            where: {
                title: {[Op.like]: query}, 
              }
        });
        if (response = null) {
            const message = "Sorry, there are no offer posts for " + title + "."
            res.json({
                message: message
            });
            res.sendStatus(200);
        } else {
            res.json(response);
            res.sendStatus(200);
        }
    } catch (error) {
      console.log("Error with searching for offer posts: " + error);
      res.sendStatus(500);
    }
}

const searchRequestsWithTags = async (req, res) => {
  try {
      const tagList = req.params.tagList;

      //list of postIds that have the tags
      const postIds = await RequestPostTags.findAll({
          attributes: {include: ["postId"]},
          where: {name: tagList}
      });
      
      //check whether there are duplicates in postIds list
      let uniquePostIds = [...new Set(postIds)];
      
      //find list of posts that match postIds
      const postList = await RequestPost.findAll({
          where: {requestId: uniquePostIds}
      });

      if (postList = null) {
          const message = "Sorry, there are no offer posts for " + tagList + "."
          res.json({
              message: message
          });
          res.sendStatus(200);
      } else {
          res.json(postList);
          res.sendStatus(200);
      }
  } catch (error) {
    console.log("Error with searching for offer posts: " + error);
    res.sendStatus(500);
  }
}

const createRequest = async (req, res) => {
    try {
        const newRequest = RequestPost.create({
            title: req.body.title,
            description: req.body.description,
            currentLocation: req.body.currentLocation
          });
        req.body.tagList.foreach(tag => {
            RequestPostTags.create({
                postId: newRequest.requestId,
                name: tag
              });
          });
          res.sendMessage("New post has been created.");
          res.sendStatus(200);
    } catch (error) {
      console.log("Error creating a new post: " + error);
      res.sendStatus(500);
    }
}

const updateRequest = async (req, res) => {
    try {
        await RequestPost.update({
          title: req.body.title,
          description: req.body.description,
          currentLocation: req.body.currentLocation
        }, {
            where: {
                requestId: req.body.requestId
            }
        });

        req.body.tagList.foreach(async tag => {
            await RequestPostTags.update({name: tag}, {
                where: {
                    postId: req.body.requestId
                }
            });
        });
        const message = req.body.title + " post has been updated.";
        res.sendMessage(message);
        res.sendStatus(200);
    } catch (error) {
      console.log("Error updating post: " + error);
      res.sendStatus(500);
    }

}

//Delete post
const deleteRequest = async (req, res) => {
  try {
      await RequestPost.destroy({
          where: {
              requestId: req.body.requestId
          }
      });
      res.sendStatus(200);
  } catch (error) {
      console.log("Error deleting post: " + error);
      res.sendStatus(500);
  }
}

module.exports = {
  getRequest,
  searchRequests,
  searchRequestsWithTags,
  createRequest,
  updateRequest,
  deleteRequest
};
  